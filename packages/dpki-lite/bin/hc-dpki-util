#!/usr/bin/env node
// vim: set syntax=javascript:

const os = require('os')
const fs = require('fs')
const path = require('path')

const { mkdirp } = require('@holochain/n3h-common')
const mosodium = require('@holochain/mosodium')
const prompt = require('prompt')

const { RootSeed, Seed, work } = require('../lib/index')

function getp (opt) {
  if (typeof opt === 'string') {
    opt = { description: opt }
  }
  return new Promise((resolve, reject) => {
    prompt.message = ''
    prompt.start()
    prompt.get({
      properties: {
        input: {
          description: opt.description || '',
          message: opt.message || 'invalid input',
          pattern: opt.pattern || /^[^]+$/,
          default: opt.default,
          required: typeof opt.required === 'boolean' ? opt.required : true
        }
      }
    }, (err, res) => {
      if (err) {
        return reject(err)
      }
      resolve(res)
    })
  })
}

async function main () {
  if (!(process.argv[2] in CMD)) {
    return CMD.help()
  }

  await CMD[process.argv[2]](...process.argv.slice(3))
}

async function init () {
  const homeDir = 'HC_DPKI_HOME' in process.env
    ? process.env.HC_DPKI_HOME
    : path.join(os.homedir(), '.hc-dpki')

  await mkdirp(homeDir)
  const passphrase = await mosodium.SecBuf.readPrompt('passphrase (no echo): ')

  let rsbundle = null
  let hint = ''
  try {
    rsbundle = fs.readFileSync(path.join(homeDir, 'root-seed.json'))
  } catch (e) {
    console.error('\n')
    console.error(e.stack || e.toString())
    console.error('could not load root seed')
    console.error()
    const answer = await getp('generate new root seed? [y/N]')
    if ((answer.input[0] || '').toUpperCase() !== 'Y') {
      throw new Error('aborting')
    }

    const rs = await RootSeed.newRandom()

    hint = (await getp('root seed hint / info / description')).input

    console.log('\n### BEGIN ROOT SEED GENERATION ###\n')

    rsbundle = JSON.stringify(await rs.getBundle(
      passphrase, hint), null, 2)

    await rs.destroy()
  }

  rsbundle = JSON.parse(rsbundle)
  const rootSeed = await Seed.fromBundle(rsbundle, passphrase)

  console.error('  -- root bundle -- ')

  console.log(JSON.stringify(rsbundle, null, 2))

  console.error('  -- root mnemonic -- ')

  console.log(rootSeed.getMnemonic())

  console.error('\n### END ROOT SEED GENERATION ##\n')

  return {
    hint,
    homeDir,
    passphrase,
    rootSeed
  }
}

const CMD = {
  work: async (workTarget) => {
    mosodium.SecBuf.setLockLevel(mosodium.SecBuf.LOCK_NONE)
    const key = mosodium.random.bytes(32)
    console.log('for key ' + key.toString('hex'))
    console.log('searching for nonce...')
    const nonce = await work.search({
      key,
      progress: ops => {
        if (ops % 10 === 0) {
          console.log(ops)
        }
      },
      workTarget: Buffer.from(workTarget, 'hex')
    })
    console.log('generated nonce: ' + nonce)
    const tmp = mosodium.hash.sha256(Buffer.concat([
      key,
      Buffer.from(nonce, 'hex')
    ]))
    console.log('tmp hash: ' + tmp.toString('hex'))
    let tag = tmp.readInt32LE(0)
    for (let i = 4; i < 32; i += 4) {
      tag = tag ^ tmp.readInt32LE(i)
    }
    console.log('rrdht location: ' + tag)
  },

  device: async (index, pin) => {
    if (typeof pin !== 'string' || pin.length < 4) {
      throw new Error('pin must be a string >= 4 characters')
    }

    index = parseInt(index, 10)
    if (isNaN(index) || index < 0) {
      throw new Error('invalid index: ' + index)
    }
    console.log('device', index)

    const z = await init()

    const device = await z.rootSeed.getDeviceSeed(index)

    console.error('\n### BEGIN DEVICE SEED ###\n')
    console.error('  -- device mnemonic --')
    console.log(device.getMnemonic())

    const bundle = JSON.stringify(await device.getBundle(
      z.passphrase, z.hint + ' : device index ' + index), null, 2)

    console.error('  -- device bundle --')
    console.log(bundle)

    console.error('\n### END DEVICE SEED ###\n')

    console.error('\n### BEGIN DEVICE PIN SEED ###\n')
    const devicePin = await device.getDevicePinSeed(pin)

    const pinBundle = JSON.stringify(await devicePin.getBundle(
      z.passphrase, z.hint + ' : device index ' + index + ' (pin)'), null, 2)

    console.error('  -- device pin bundle --')
    console.log(pinBundle)

    console.error('\n### END DEVICE PIN SEED ###\n')

    console.error('\n### BEGIN APPLICATION KEYPAIRS ###\n')

    for (let i = 1; i <= 5; ++i) {
      const kp = await devicePin.getApplicationKeypair(i)
      console.error('  -- APPLICATION KEYPAIR ' + i + ' --')
      console.log(kp.getId())
      await kp.destroy()
    }

    console.error('\n### END APPLICATION KEYPAIRS ###\n')

    await devicePin.destroy()
    await device.destroy()
    z.passphrase.free()
  },

  help: async () => {
    console.log('hc-dpki-util [command] [args]')
    console.log('  work /workTarget/ - demo work generation for RRDHT tag')
    console.log('  device /index/ /pin/ - generate password encrypted device seed')
  }
}

main().then(() => {}, (err) => {
  console.error(err.stack || err.toString())
  process.exit(1)
})
